## List all <%= t(".resource_plural", scope: resource) %>
<% unless t('.gecko.unavailable', scope: resource) == true %>
```ruby
require 'gecko-ruby'
gecko = Gecko::Client.new(<OAUTH_ID>, <OAUTH_SECRET>)
access_token = OAuth2::AccessToken.new(gecko.oauth_client, <ACCESS_TOKEN>)
gecko.access_token = access_token

gecko.<%= t(".resource_klass", scope: resource) %>.where(limit: 25, status: 'active')
```
<% end %>

```shell
curl -X GET -H "Content-type: application/json" -H "Authorization: Bearer <ACCESS_TOKEN>"
https://api.tradegecko.com/<%= t(".resource_plural", scope: resource) %>/
```

```json
{
  "<%= t(".resource_plural", scope: resource) %>": <%= json_all %>
}
```

Returns a list of <%= t(".resource_plural", scope: resource) %> youâ€™ve previously created. The <%= t(".resource_plural", scope: resource) %> are returned in sorted order, with the most recent <%= t(".resource_plural", scope: resource) %> appearing first.

### Filters

| Arguments          | Description
|--------------------|--------------------
| **ids**            | An array of <%= t(".resource_name", scope: resource) %> IDs. See [Getting Started](http://developer.tradegecko.com/?shell#filtering) for examples.
| **limit**          | used for pagination (default is 100)
| **page**           | used for pagination (default is 1)
| **created_at_min** | ISO 8601 format (e.g. 2015-11-04T00:00:00.00Z)
| **created_at_max** | ISO 8601 format (e.g. 2015-11-04T00:00:00.00Z)
| **updated_at_min** | ISO 8601 format (e.g. 2015-11-04T00:00:00.00Z)
| **updated_at_max** | ISO 8601 format (e.g. 2015-11-04T00:00:00.00Z)
<% if t(".attributes", scope: resource).key?(:status) %>
  <% if !["company", "product", "purchase_order","fulfillment","order"].include?(t(".resource_name", scope: resource)) %>
    **status** | Possible options are: `active`, `archived`. Default is `active`
  <% elsif ["company", "product", "purchase_order"].include?(t(".resource_name", scope: resource)) %>
    **status** | Possible options are: `active`, `disabled`, `archived`. Default is `active`
  <% end %>
<% end %>
<% t(".attributes", scope: resource).select{ |k,v| v[:filterable] }.each_pair do |key, value| %>
  **<%= value[:name] %>** | <%= value[:filterable].is_a?(String) ? value[:filterable] : nil %>
<% end %>

### HTTP Request:
`GET  https://api.tradegecko.com/<%= t(".resource_plural", scope: resource) %>`
